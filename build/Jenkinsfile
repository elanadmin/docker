node ("$TargetBuildSlave"){

    def app

    properties([
      parameters([
        string(name: 'DockerImageName', defaultValue: 'ubuntu-elan-ssh', description: 'Docker Image Name That Needs To Be Built', ),
        string(name: 'TargetBuildSlave', defaultValue: 'edaldokp01.elan.elantecs.com', description: 'Docker Slave', ),
        string(name: 'Dockerfile', defaultValue: 'Dockerfile.ssh', description: 'Docker Build Input File', ),
        string(name: 'DockerHubUser', defaultValue: 'elanadmin', description: 'Docker Hub Login User', )
       ])
    ])
    
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

    dir ('build') {
        sh 'pwd'
        app = docker.build("$DockerImageName", "-f $Dockerfile .")
        }
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image. */

        app.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push image to Elan Registry') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('http://edalregp01.elan.elantecs.com:5000', 'DockerHub') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage('Push image to Public Registry') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://docker.io', 'DockerHub') {
            /* app.push("${env.BUILD_NUMBER}")
             * app.push("latest") */
            sh "docker tag ${DockerImageName} ${DockerHubUser}/${DockerImageName}:${env.BUILD_NUMBER}"
            sh "docker tag ${DockerImageName} ${DockerHubUser}/${DockerImageName}:latest"
            sh "docker push ${DockerHubUser}/${DockerImageName}:${env.BUILD_NUMBER}"
            sh "docker push ${DockerHubUser}/${DockerImageName}:latest"
        }
    }

   stage('Triggering Local Image Cleanup') {
        /* This will cleanup the local docker images built. */
        build job: 'Docker-Build-Cleanup', parameters: [[$class: 'StringParameterValue', name: 'DockerImageName', value: "$DockerImageName"], [$class: 'StringParameterValue', name: 'TargetBuildSlave', value: "$TargetBuildSlave"]]
    }

}
